#include <stdio.h>
#include <stdbool.h>

#define MAX_STATES 10


void epsilonClosure(int nfa[MAX_STATES][MAX_STATES], int numStates, int state, bool visited[MAX_STATES], bool epsilonClosureSet[MAX_STATES]);

int main() {
    int nfa[MAX_STATES][MAX_STATES] = {
        {1, -1, 2, -1}, // State 0
        {-1, -1, -1, 3}, // State 1
        {-1, 4, -1, -1}, // State 2
        {-1, -1, 5, -1}, // State 3
        {6, -1, -1, -1}, // State 4
        {-1, 7, -1, -1}, // State 5
        {-1, -1, -1, 8}, // State 6
        {-1, -1, -1, 9}, // State 7
        {-1, -1, -1, 9}, // State 8
        {-1, -1, -1, -1} // State 9 (final state)
    };

    int numStates = 10;
    bool visited[MAX_STATES] = {false};
    bool epsilonClosureSet[MAX_STATES][MAX_STATES];

    
    for (int i = 0; i < numStates; i++) {
        for (int j = 0; j < numStates; j++) {
            epsilonClosureSet[i][j] = false;
        }
        epsilonClosure(nfa, numStates, i, visited, epsilonClosureSet[i]);
    }

    
    printf("Îµ-Closure for each state:\n");
    for (int i = 0; i < numStates; i++) {
        printf("State %d: { ", i);
        for (int j = 0; j < numStates; j++) {
            if (epsilonClosureSet[i][j]) {
                printf("%d ", j);
            }
        }
        printf("}\n");
    }

    return 0;
}


void epsilonClosure(int nfa[MAX_STATES][MAX_STATES], int numStates, int state, bool visited[MAX_STATES], bool epsilonClosureSet[MAX_STATES]) {
    visited[state] = true;
    epsilonClosureSet[state] = true;

    for (int i = 0; i < numStates; i++) {
        if (nfa[state][i] == -1) continue;
        if (!visited[i]) {
            epsilonClosure(nfa, numStates, i, visited, epsilonClosureSet);
        }
        for (int j = 0; j < numStates; j++) {
            if (epsilonClosureSet[i][j]) {
                epsilonClosureSet[state][j] = true;
            }
        }
    }
}
