#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#define MAX_STATES 10


struct Transition {
    int state;
    char symbol;
};


struct NFAState {
    int state;
    bool epsilonClosure[MAX_STATES];
};


void epsilonClosure(int nfa[MAX_STATES][MAX_STATES], int numStates, int state, bool visited[MAX_STATES], bool epsilonClosureSet[MAX_STATES]);
void findEpsilonClosures(int nfa[MAX_STATES][MAX_STATES], int numStates, struct NFAState nfaStates[MAX_STATES]);

int main() {
    int nfa[MAX_STATES][MAX_STATES] = {
        {1, -1, -1},
        {2, 3, -1},
        {-1, -1, 4},
        {2, -1, -1},
        {-1, -1, -1}
    };
    int numStates = 5;

    struct NFAState nfaStates[MAX_STATES];

    findEpsilonClosures(nfa, numStates, nfaStates);

    printf("Îµ-Closure for each state:\n");
    for (int i = 0; i < numStates; i++) {
        printf("State %d: { ", nfaStates[i].state);
        for (int j = 0; j < numStates; j++) {
            if (nfaStates[i].epsilonClosure[j]) {
                printf("%d ", j);
            }
        }
        printf("}\n");
    }

    return 0;
}


void epsilonClosure(int nfa[MAX_STATES][MAX_STATES], int numStates, int state, bool visited[MAX_STATES], bool epsilonClosureSet[MAX_STATES]) {
    visited[state] = true;
    epsilonClosureSet[state] = true;

    for (int i = 0; i < numStates; i++) {
        if (nfa[state][i] != -1 && nfa[state][i] != state && !visited[nfa[state][i]]) {
            epsilonClosure(nfa, numStates, nfa[state][i], visited, epsilonClosureSet);
        }
    }
}


void findEpsilonClosures(int nfa[MAX_STATES][MAX_STATES], int numStates, struct NFAState nfaStates[MAX_STATES]) {
    for (int i = 0; i < numStates; i++) {
        bool visited[MAX_STATES] = {false};
        bool epsilonClosureSet[MAX_STATES] = {false};

        epsilonClosure(nfa, numStates, i, visited, epsilonClosureSet);

        nfaStates[i].state = i;
        memcpy(nfaStates[i].epsilonClosure, epsilonClosureSet, numStates * sizeof(bool));
    }
}
